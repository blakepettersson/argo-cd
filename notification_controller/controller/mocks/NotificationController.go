// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mocks

import (
	"context"
	"sync"

	"github.com/argoproj/argo-cd/v3/notification_controller/controller"
)

// Ensure that NotificationController does implement controller.NotificationController.
// If this is not the case, regenerate this file with mockery.
var _ controller.NotificationController = &NotificationController{}

// NotificationController is a mock implementation of controller.NotificationController.
//
//	func TestSomethingThatUsesNotificationController(t *testing.T) {
//
//		// make and configure a mocked controller.NotificationController
//		mockedNotificationController := &NotificationController{
//			InitFunc: func(ctx context.Context) error {
//				panic("mock out the Init method")
//			},
//			RunFunc: func(ctx context.Context, processors int)  {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedNotificationController in code that requires controller.NotificationController
//		// and then make assertions.
//
//	}
type NotificationController struct {
	// InitFunc mocks the Init method.
	InitFunc func(ctx context.Context) error

	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, processors int)

	// calls tracks calls to the methods.
	calls struct {
		// Init holds details about calls to the Init method.
		Init []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Processors is the processors argument value.
			Processors int
		}
	}
	lockInit sync.RWMutex
	lockRun  sync.RWMutex
}

// Init calls InitFunc.
func (mock *NotificationController) Init(ctx context.Context) error {
	if mock.InitFunc == nil {
		panic("NotificationController.InitFunc: method is nil but NotificationController.Init was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(ctx)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//
//	len(mockedNotificationController.InitCalls())
func (mock *NotificationController) InitCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *NotificationController) Run(ctx context.Context, processors int) {
	if mock.RunFunc == nil {
		panic("NotificationController.RunFunc: method is nil but NotificationController.Run was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Processors int
	}{
		Ctx:        ctx,
		Processors: processors,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc(ctx, processors)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedNotificationController.RunCalls())
func (mock *NotificationController) RunCalls() []struct {
	Ctx        context.Context
	Processors int
} {
	var calls []struct {
		Ctx        context.Context
		Processors int
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
