// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mocks

import (
	"context"
	"sync"

	"github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	"github.com/argoproj/argo-cd/v3/util/notification/argocd"
	"github.com/argoproj/argo-cd/v3/util/notification/expression/shared"
)

// Ensure that Service does implement service.Service.
// If this is not the case, regenerate this file with mockery.
var _ service.Service = &Service{}

// Service is a mock implementation of service.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked service.Service
//		mockedService := &Service{
//			CloseFunc: func()  {
//				panic("mock out the Close method")
//			},
//			GetAppDetailsFunc: func(ctx context.Context, app *v1alpha1.Application) (*shared.AppDetail, error) {
//				panic("mock out the GetAppDetails method")
//			},
//			GetCommitMetadataFunc: func(ctx context.Context, repoURL string, commitSHA string, project string) (*shared.CommitMetadata, error) {
//				panic("mock out the GetCommitMetadata method")
//			},
//		}
//
//		// use mockedService in code that requires service.Service
//		// and then make assertions.
//
//	}
type Service struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// GetAppDetailsFunc mocks the GetAppDetails method.
	GetAppDetailsFunc func(ctx context.Context, app *v1alpha1.Application) (*shared.AppDetail, error)

	// GetCommitMetadataFunc mocks the GetCommitMetadata method.
	GetCommitMetadataFunc func(ctx context.Context, repoURL string, commitSHA string, project string) (*shared.CommitMetadata, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetAppDetails holds details about calls to the GetAppDetails method.
		GetAppDetails []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// App is the app argument value.
			App *v1alpha1.Application
		}
		// GetCommitMetadata holds details about calls to the GetCommitMetadata method.
		GetCommitMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RepoURL is the repoURL argument value.
			RepoURL string
			// CommitSHA is the commitSHA argument value.
			CommitSHA string
			// Project is the project argument value.
			Project string
		}
	}
	lockClose             sync.RWMutex
	lockGetAppDetails     sync.RWMutex
	lockGetCommitMetadata sync.RWMutex
}

// Close calls CloseFunc.
func (mock *Service) Close() {
	if mock.CloseFunc == nil {
		panic("Service.CloseFunc: method is nil but Service.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedService.CloseCalls())
func (mock *Service) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetAppDetails calls GetAppDetailsFunc.
func (mock *Service) GetAppDetails(ctx context.Context, app *v1alpha1.Application) (*shared.AppDetail, error) {
	if mock.GetAppDetailsFunc == nil {
		panic("Service.GetAppDetailsFunc: method is nil but Service.GetAppDetails was just called")
	}
	callInfo := struct {
		Ctx context.Context
		App *v1alpha1.Application
	}{
		Ctx: ctx,
		App: app,
	}
	mock.lockGetAppDetails.Lock()
	mock.calls.GetAppDetails = append(mock.calls.GetAppDetails, callInfo)
	mock.lockGetAppDetails.Unlock()
	return mock.GetAppDetailsFunc(ctx, app)
}

// GetAppDetailsCalls gets all the calls that were made to GetAppDetails.
// Check the length with:
//
//	len(mockedService.GetAppDetailsCalls())
func (mock *Service) GetAppDetailsCalls() []struct {
	Ctx context.Context
	App *v1alpha1.Application
} {
	var calls []struct {
		Ctx context.Context
		App *v1alpha1.Application
	}
	mock.lockGetAppDetails.RLock()
	calls = mock.calls.GetAppDetails
	mock.lockGetAppDetails.RUnlock()
	return calls
}

// GetCommitMetadata calls GetCommitMetadataFunc.
func (mock *Service) GetCommitMetadata(ctx context.Context, repoURL string, commitSHA string, project string) (*shared.CommitMetadata, error) {
	if mock.GetCommitMetadataFunc == nil {
		panic("Service.GetCommitMetadataFunc: method is nil but Service.GetCommitMetadata was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		RepoURL   string
		CommitSHA string
		Project   string
	}{
		Ctx:       ctx,
		RepoURL:   repoURL,
		CommitSHA: commitSHA,
		Project:   project,
	}
	mock.lockGetCommitMetadata.Lock()
	mock.calls.GetCommitMetadata = append(mock.calls.GetCommitMetadata, callInfo)
	mock.lockGetCommitMetadata.Unlock()
	return mock.GetCommitMetadataFunc(ctx, repoURL, commitSHA, project)
}

// GetCommitMetadataCalls gets all the calls that were made to GetCommitMetadata.
// Check the length with:
//
//	len(mockedService.GetCommitMetadataCalls())
func (mock *Service) GetCommitMetadataCalls() []struct {
	Ctx       context.Context
	RepoURL   string
	CommitSHA string
	Project   string
} {
	var calls []struct {
		Ctx       context.Context
		RepoURL   string
		CommitSHA string
		Project   string
	}
	mock.lockGetCommitMetadata.RLock()
	calls = mock.calls.GetCommitMetadata
	mock.lockGetCommitMetadata.RUnlock()
	return calls
}
